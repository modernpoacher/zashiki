"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=getRID;var _regenerator=_interopRequireDefault(require("@babel/runtime/regenerator"));require("regenerator-runtime/runtime");var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _debug=_interopRequireDefault(require("debug"));var _boom=_interopRequireDefault(require("@hapi/boom"));var _master=require("@modernpoacher/zashiki-transport/lib/stores/components/route-list/master");var _maps=require("@modernpoacher/zashiki-transport/lib/maps");var _caches=require("@modernpoacher/zashiki-transport/lib/caches");var _exception=require("../../exception");var routeListMaster=new _master.RouteListMaster();var log=(0,_debug.default)('zashiki:common:rid:alpha:get-rid');log('`getRID` is awake');function getRID(_x){return _getRID.apply(this,arguments);}function _getRID(){_getRID=(0,_asyncToGenerator2.default)(_regenerator.default.mark(function _callee(_ref){var _ref$pre,_ref$pre2,jid,_ref$state,state,_ref$params,params,_yield$getAlphaFromCa,aid,routeList,resource,_yield$routeList$getA,rid;return _regenerator.default.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_ref$pre=_ref.pre,_ref$pre2=_ref$pre===void 0?{}:_ref$pre,jid=_ref$pre2.jid,_ref$state=_ref.state,state=_ref$state===void 0?{}:_ref$state,_ref$params=_ref.params,params=_ref$params===void 0?{}:_ref$params;_context.t0=_caches.getAlphaFromCache;_context.next=4;return(0,_maps.mapAlphaStage)(params);case 4:_context.t1=_context.sent;_context.next=7;return(0,_context.t0)(_context.t1);case 7:_yield$getAlphaFromCa=_context.sent;aid=_yield$getAlphaFromCa.aid;routeList=routeListMaster.use(jid);resource={alpha:aid};_context.next=13;return routeList.hasAlpha(resource);case 13:if(!_context.sent){_context.next=19;break;}_context.next=16;return routeList.getAlpha(resource);case 16:_yield$routeList$getA=_context.sent;rid=_yield$routeList$getA.rid;return _context.abrupt("return",rid);case 19:throw _boom.default.notFound(_exception.NOT_FOUND);case 20:case"end":return _context.stop();}}},_callee);}));return _getRID.apply(this,arguments);}